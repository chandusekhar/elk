/*******************************************************************************
 * Copyright (c) 2018 Kiel University and others.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/ 
package org.eclipse.elk.alg.packing.rectangles
 
/* Metadata file for rectangle packing algorithms. Enables support for options and specifies auto-generated files.
 */
import org.eclipse.elk.alg.packing.rectangles.RectPackingLayoutProvider
import org.eclipse.elk.alg.packing.rectangles.util.PackingStrategy
import org.eclipse.elk.core.math.ElkPadding

//BUNDLE
bundle {
    metadataClass options.RectPackingMetaDataProvider
    idPrefix org.eclipse.elk.rectpacking
}

//ALGORITHM
algorithm rectPacking(RectPackingLayoutProvider) {
    label "Rectangle Layout."
    description 
          "Algorithm for packing of unconnected boxes, i.e. graphs without edges. In the default settings, the algorithm 
           checks for a case where one big rectangle is present with a lot of smaller rectangles with the same height 
           and applies a special algorithm to it. If this is not the case, the algorithm then uses to phases. One phase
           approximates an area where the rectangles can be placed and then another to place them there and align them
           nicely. Finally, the rectangles are expanded to fill their bounding box and eliminate empty unused spaces."
    metadataClass options.RectPackingOptions
    supports org.eclipse.elk.aspectRatio = 1.3
    supports org.eclipse.elk.padding = new ElkPadding(15)
    supports org.eclipse.elk.expandNodes
    supports strategy
    supports lastPlaceShift
    supports onlyFirstIteration
    supports checkForSpecialCase
}

//OPTIONS
advanced option strategy: PackingStrategy {
    label "Packing Strategy"
    description 
        "Strategy for approximation of the bounding box given by the first iteration. Determines whether layout is 
         sorted by scale measure, aspect ratio or area."
    targets nodes
    default = PackingStrategy.MAX_SCALE_DRIVEN
}
    
advanced option lastPlaceShift: boolean {
    label "Shift when placing at last placed rectangle."
    description
        "When placing a rectangle behind or below the last placed rectangle in the first iteration, it is sometimes 
         possible to shift the rectangle further to the left or right, resulting in less whitespace. True (default) 
         enables the shift and false disables it. Disabling the shift produces a greater approximated area by the first 
         iteration and a layout, when using ONLY the first iteration (default not the case), where it is sometimes 
         impossible to implement a size transformation of rectangles that will fill the bounding box and eliminate 
         empty spaces."
    targets nodes
    default = true
}
    
programmatic option onlyFirstIteration: boolean {
    label "Only first iteration should be executed."
    description
       "Determines whether only the first iteration should be executed or not. If set to true, only the first iteration
        will be executed. When using only the first iteration, rectangles will not be resized to fill their bounding
        box and eliminate unused whitespace."
    targets nodes
     default = false
} 
  
programmatic option checkForSpecialCase: boolean {
    label "Check for special case one big rectangle."
    description
        "Determines whether the algorithm should check for the case that one big rectangle is present with a lot of 
         smaller rectangles of the same size. If the check is true, a special algorithm for this case is used."
    targets nodes
    default = false
} 